#!/bin/sh

# Created with Random Explorer Benchmark Generator (version v0.0.1), seed 1 (MinSelectivity: 0.2, MaxSelectivity: 0.9, MaxChain: 3, MaxTries: 100, RandomBrowseProb: 0.1, GoBackProb: 0.4, Weighted-Paths: false, Predicates: [Exists,BoolEquality,IsString,IntEquality,FloatComparison,StrPrefix,ObjectSize,ArraySize])
jq -c 'inputs | select(( .user.lang | type == "string" ))' Twitter.json | jq -s -c 'def agg(s): reduce s as $x (0; . + ($x | .place.name | 1));  group_by(.filter_level) | map({group: .[0].filter_level,  count: agg(.[])})'
jq -c 'inputs | select(( ( ( .user.lang | type == "string" ) and ( ( ( ( .retweeted_status.quoted_status.user.friends_count <= 2151584.114948 ) and ( .quoted_status.user | has("profile_sidebar_fill_color") ) ) or ( .quoted_status.user.url | (. != null and startswith("ht")) ) ) or ( .retweeted_status.user | has("id_str") ) ) ) and ( .favorite_count | type == "number" ) ))' Twitter.json | jq -s -c 'def agg(s): reduce s as $x (0; . + ($x | .favorite_count));  group_by(.retweeted_status.user.location) | map({group: .[0].retweeted_status.user.location,  sum: agg(.[])})'
jq -c 'inputs | select(( ( .user.lang | type == "string" ) and ( ( ( ( ( ( ( .retweeted_status.in_reply_to_user_id_str | (. != null and startswith("7")) ) or ( .retweeted_status.in_reply_to_user_id_str | (. != null and startswith("2")) ) ) or ( .retweeted_status.in_reply_to_user_id_str | (. != null and startswith("3")) ) ) or ( .retweeted_status.in_reply_to_user_id_str | (. != null and startswith("6")) ) ) or ( .in_reply_to_user_id == 196237365303820530 ) ) or ( .quoted_status.in_reply_to_user_id == 668797006026254403 ) ) or ( .retweeted_status.filter_level | (. != null and startswith("l")) ) ) ))' Twitter.json | jq -s -c 'def agg(s): reduce s as $x (0; . + ($x | .retweeted | 1));  group_by(.quoted_status.place.url) | map({group: .[0].quoted_status.place.url,  count: agg(.[])})'
jq -c 'inputs | select(( ( .user.lang | type == "string" ) and ( ( ( .retweeted_status.quoted_status.entities | has("symbols") ) or ( .retweeted_status.quoted_status | has("place") ) ) or ( .retweeted_status | has("filter_level") ) ) ))' Twitter.json | jq -s -c 'def agg(s): reduce s as $x (0; . + 1);  group_by(.retweeted_status.quoted_status_id_str) | map({group: .[0].retweeted_status.quoted_status_id_str,  count: agg(.[])})'
jq -c 'inputs | select(( ( .user.lang | type == "string" ) and ( ( ( .place.place_type | (. != null and startswith("c")) ) or ( .place.place_type | (. != null and startswith("a")) ) ) or ( .user.location | type == "string" ) ) ))' Twitter.json | jq -s -c 'def agg(s): reduce s as $x (0; . + 1);  group_by(.quoted_status.id_str) | map({group: .[0].quoted_status.id_str,  count: agg(.[])})'
jq -c 'inputs | select(( . | has("retweeted") ))' Twitter.json | jq -s -c 'def agg(s): reduce s as $x (0; . + ($x | .scopes | 1));  group_by(.retweeted_status.user.default_profile_image) | map({group: .[0].retweeted_status.user.default_profile_image,  count: agg(.[])})'
jq -c 'inputs | select(( ( .retweeted_status.user | has("notifications") ) and ( .user.friends_count | type == "number" ) ))' Twitter.json | jq -s -c 'def agg(s): reduce s as $x (0; . + ($x | .user.friends_count));  group_by(.retweeted_status.in_reply_to_user_id) | map({group: .[0].retweeted_status.in_reply_to_user_id,  sum: agg(.[])})'
jq -c 'inputs | select(( ( .retweeted_status.quoted_status | has("favorited") ) or ( .user | has("profile_background_image_url_https") ) ))' Twitter.json | jq -s -c 'def agg(s): reduce s as $x (0; . + ($x | .retweeted_status.quoted_status.user.utc_offset | 1));  group_by(.quoted_status.user.is_translator) | map({group: .[0].quoted_status.user.is_translator,  count: agg(.[])})'
jq -c 'inputs | select(( ( ( .retweeted_status.quoted_status | has("favorited") ) or ( .user | has("profile_background_image_url_https") ) ) and ( ( ( ( .retweeted_status.quoted_status.user | has("default_profile") ) or ( .quoted_status.user.time_zone | (. != null and startswith("Asia")) ) ) or ( ( ( .quoted_status.user.created_at | (. != null and startswith("S")) ) or ( .quoted_status.user.created_at | (. != null and startswith("T")) ) ) or ( .quoted_status.user.created_at | (. != null and startswith("M")) ) ) ) or ( .user.profile_background_tile == false ) ) ))' Twitter.json | jq -s -c 'def agg(s): reduce s as $x (0; . + ($x | .retweeted_status.quoted_status.id_str | 1));  group_by(.retweeted_status.quoted_status.source) | map({group: .[0].retweeted_status.quoted_status.source,  count: agg(.[])})'
jq -c 'inputs | select(( ( ( ( .retweeted_status.quoted_status | has("favorited") ) or ( .user | has("profile_background_image_url_https") ) ) and ( ( ( ( .retweeted_status.quoted_status.user | has("default_profile") ) or ( .quoted_status.user.time_zone | (. != null and startswith("Asia")) ) ) or ( ( ( .quoted_status.user.created_at | (. != null and startswith("S")) ) or ( .quoted_status.user.created_at | (. != null and startswith("T")) ) ) or ( .quoted_status.user.created_at | (. != null and startswith("M")) ) ) ) or ( .user.profile_background_tile == false ) ) ) and ( ( ( .retweeted_status.user.is_translator == true ) or ( .retweeted_status.extended_tweet.entities | has("urls") ) ) or ( .retweeted_status.quoted_status.user.profile_link_color | type == "string" ) ) ))' Twitter.json | jq -s -c 'def agg(s): reduce s as $x (0; . + 1);  group_by(.text) | map({group: .[0].text,  count: agg(.[])})'
